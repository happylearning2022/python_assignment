import boto3
import json
import chromadb
import pandas as pd
from io import StringIO

# AWS Client Initialization
s3_client = boto3.client("s3")
bedrock_client = boto3.client("bedrock-runtime")

# ChromaDB Client Initialization
chroma_client = chromadb.PersistentClient(path="./chroma_db")  # Save vectors locally
collection = chroma_client.get_or_create_collection(name="css_metadata")

# Function to load metadata from S3
def load_metadata_from_s3(bucket_name, file_key):
    response = s3_client.get_object(Bucket=bucket_name, Key=file_key)
    metadata = json.loads(response["Body"].read().decode("utf-8"))
    return metadata

# Function to get embedding from Amazon Titan model
def get_embedding(text):
    response = bedrock_client.invoke_model(
        modelId="amazon.titan-embed-text-v1",
        contentType="application/json",
        accept="application/json",
        body=json.dumps({"inputText": text})
    )
    return json.loads(response["body"].read())["embedding"]

# Function to insert metadata and embeddings into ChromaDB
def insert_metadata_into_chromadb(metadata):
    for idx, row in enumerate(metadata):
        text = row["description"]  # Adjust key based on metadata structure
        embedding = get_embedding(text)

        collection.add(
            ids=[str(idx)],  # Unique ID for each record
            embeddings=[embedding],  # Vector embeddings
            metadatas=[{
                "table_name": row["table_name"],
                "column_name": row["column_name"],
                "description": text
            }]
        )

# Function to perform similarity search in ChromaDB
def perform_similarity_search(query_text, n_results=5):
    query_embedding = get_embedding(query_text)
    results = collection.query(
        query_embeddings=[query_embedding],
        n_results=n_results  # Get top 5 matches
    )
    return results

# Main Workflow
if __name__ == "__main__":
    # Define your S3 bucket and metadata file path
    bucket_name = "your-bucket-name"
    file_key = "path/to/your/metadata.json"

    # Load metadata from S3
    metadata = load_metadata_from_s3(bucket_name, file_key)
    print(f"Loaded {len(metadata)} metadata records.")

    # Insert metadata and embeddings into ChromaDB
    insert_metadata_into_chromadb(metadata)
    print("Metadata and embeddings inserted into ChromaDB.")

    # Perform similarity search
    query_text = "Find all CSS-related tables and columns"
    search_results = perform_similarity_search(query_text)
    print("Search Results:", search_results)
